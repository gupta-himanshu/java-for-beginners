1. In Java, Modulus (%) operator can be applied to floating-point types as well as integer types. In C/C++, it can be applied only to integer types.

2. In C/C++, true is any nonzero value and false is zero. In Java, true and false are nonnumeric values which do not relate to zero or nonzero.

3. In C/C++, comma is an operator that can be used in any valid expression. But, in Java the comma is a separator that applies only to the for loop.

4. In Java, an object reference is similar to a memory pointer. The main difference and the key to Java's safety is that we cannot manipulate the references as we can with actual pointers. Thus, we cannot cause an object reference to point to an arbitrary memory location or manipulate it like an integer.

5. In C, the function abs() returns the absolute value of an integer, labs() returns the absolute value of a long integer, and fabs() retruns the absolute value of a floating point value. Since, C does not support overloading, each function has to have its own name. Whereas, in Java, we can have same name for different methods, i.e., they can be overloaded.

6. In Java, their is no support for inheritance of multiple superclasses into a single subclass. This differs from C++, in which we can inherit multiple base classes.

7. Java does not have a generalized console input method that parallels the standard C function scanf() or C++ input operators.

8. In C/C++, input functions return the same value when an error occurs and when the end of the file is reached. In Java, errors are passed to the program via exceptions, not by values.

9. Other languages implement strings as Character arrays, but Java implements strings as objects of type String.

10. In Java once a String object is created, we cannot change the characters that comprise that string. But, we can still perform all types of string operations on it. The difference is that each time you need an altered version of an existing string, a new String object is created that contains the modifications. The original string is left unchanged. The reason for using this approach is that, fixed and immutable strings can be implemented more efficiently than changeable ones.
